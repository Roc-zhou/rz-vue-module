!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("rz-vue",[],t):"object"==typeof exports?exports["rz-vue"]=t():e["rz-vue"]=t()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){var r=n(2);"string"==typeof r&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1};n(4)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";var r=n(0);n.n(r).a},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,"\n.items-center[data-v-699dda6b] {\r\n  display: flex;\r\n  display: -webkit-flex;\r\n  -webkit-align-items: center;\r\n  align-items: center;\n}\n@media screen and (max-width: 755px) {\n.mo-paging[data-v-699dda6b] {\r\n    display: inline-block;\r\n    padding: 0;\r\n    /* margin: 2em 0; */\r\n    font-size: 0;\r\n    list-style: none;\r\n    user-select: none;\n}\n.paging-item[data-v-699dda6b] {\r\n    display: inline;\r\n    font-size: 0.390625rem /* 25/64 */;\r\n    position: relative;\r\n    padding: 0.15625rem /* 10/64 */ 0.234375rem /* 15/64 */;\r\n    text-decoration: none;\r\n    border: 1px solid #ccc;\r\n    background-color: #fff;\r\n    margin-left: -1px;\r\n    cursor: pointer;\n}\n.paging-item[data-v-699dda6b]:first-child {\r\n    margin-left: 0;\n}\n.paging-item--disabled[data-v-699dda6b],\r\n  .paging-item--more[data-v-699dda6b] {\r\n    background-color: #fff;\r\n    color: #505050;\n}\n.paging-item--disabled[data-v-699dda6b] {\r\n    cursor: not-allowed;\r\n    opacity: 0.75;\n}\n.paging-item--more[data-v-699dda6b],\r\n  .paging-item--current[data-v-699dda6b] {\r\n    cursor: default;\n}\r\n  /* 选中 */\n.paging-item--current[data-v-699dda6b] {\r\n    background-color: #f2f2f2;\r\n    position: relative;\r\n    z-index: 1;\r\n    border-color: #ccc;\n}\n}\n@media screen and (min-width: 755px) {\n.mo-paging[data-v-699dda6b] {\r\n    display: inline-block;\r\n    padding: 0;\r\n    font-size: 0;\r\n    list-style: none;\r\n    user-select: none;\n}\n.paging-item[data-v-699dda6b] {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 32px;\r\n    height: 32px;\r\n    text-decoration: none;\r\n    border: 1px solid #e4e4e4;\r\n    background-color: #fff;\r\n    border-radius: 4px;\r\n    margin-left: -1px;\r\n    cursor: pointer;\r\n    font-size: 14px;\r\n    color: #333333;\r\n    text-align: center;\r\n    line-height: 32px;\r\n    margin: 0 5px;\n}\n.paging-item[data-v-699dda6b]:first-child {\r\n    margin-left: 0;\n}\n.paging-item[data-v-699dda6b]:hover {\r\n    background-color: #333;\r\n    color: #fff;\n}\n.paging-item--disabled[data-v-699dda6b],\r\n  .paging-item--more[data-v-699dda6b] {\r\n    background-color: #fff;\r\n    color: #505050;\n}\n.paging-item--disabled[data-v-699dda6b] {\r\n    cursor: not-allowed;\r\n    opacity: 0.75;\n}\n.paging-item--more[data-v-699dda6b],\r\n  .paging-item--current[data-v-699dda6b] {\r\n    cursor: default;\n}\r\n  /* 选中 */\n.paging-item--current[data-v-699dda6b] {\r\n    background-color: #333;\r\n    color: #fff;\r\n    position: relative;\n}\n.one[data-v-699dda6b] {\r\n    width: 75px;\n}\n.two[data-v-699dda6b] {\r\n    width: 60px;\n}\n}\r\n",""])},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(a=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),o=r.sources.map(function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")});return[n].concat(o).concat([i]).join("\n")}var a,s,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];null!=o&&(r[o]=!0)}for(var a=0;a<e.length;a++){var s=e[a];null!=s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="(".concat(s[2],") and (").concat(n,")")),t.push(s))}},t}},function(e,t,n){"use strict";var r,i={},o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function s(e,t){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],a=t.base?o[0]+t.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function c(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id],a=0;if(o){for(o.refs++;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(v(r.parts[a],t))}else{for(var s=[];a<r.parts.length;a++)s.push(v(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:s}}}}function d(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var r=n.nc;r&&(e.attributes.nonce=r)}if(Object.keys(e.attributes).forEach(function(n){t.setAttribute(n,e.attributes[n])}),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var l,u=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function p(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=u(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function f(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i&&e.setAttribute("media",i),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var g=null,m=0;function v(e,t){var n,r,i;if(t.singleton){var o=m++;n=g||(g=d(t)),r=p.bind(null,n,o,!1),i=p.bind(null,n,o,!0)}else n=d(t),r=f.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=s(e,t);return c(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o],d=i[a.id];d&&(d.refs--,r.push(d))}e&&c(s(e,t),t);for(var l=0;l<r.length;l++){var u=r[l];if(0===u.refs){for(var p=0;p<u.parts.length;p++)u.parts[p]();delete i[u.id]}}}}},function(e,t,n){"use strict";n.r(t);var r={name:"rz-vue-page",props:{perPages:{type:Number,default:5},pageIndex:{type:Number,default:1},pageSize:{type:Number,default:10},total:{type:Number,default:1}},methods:{prev:function(){this.index>1&&(this.go(this.index-1),this.setScrollTop(0))},next:function(){this.index<this.pages&&(this.go(this.index+1),this.setScrollTop(0))},first:function(){1!==this.index&&(this.go(1),this.setScrollTop(0))},last:function(){this.index!=this.pages&&(this.go(this.pages),this.setScrollTop(0))},go:function(e){this.index!==e&&(this.index=e,this.$emit("change",this.index),this.setScrollTop(0))},setScrollTop:function(e){document.documentElement.scrollTop=e,window.pageYOffset=e,document.body.scrollTop=e},backTop:function(){this.setScrollTop(0)}},computed:{pages:function(){return Math.ceil(this.size/this.limit)},pagers:function(){var e=[],t=this.perPages,n=this.pages,r=this.index,i=(t-1)/2,o={start:r-i,end:r+i};o.start<1&&(o.end=o.end+(1-o.start),o.start=1),o.end>n&&(o.start=o.start-(o.end-n),o.end=n),o.start<1&&(o.start=1),this.showPrevMore=o.start>1,this.showNextMore=o.end<n;for(var a=o.start;a<=o.end;a++)e.push(a);return e}},data:function(){return{index:this.pageIndex,limit:this.pageSize,size:this.total||1,showPrevMore:!1,showNextMore:!1}},watch:{pageIndex:function(e){this.index=e||1},pageSize:function(e){this.limit=e||10},total:function(e){this.size=e||1}}};n(1);function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var s={Page:function(e,t,n,r,i,o,a,s){var c,d="function"==typeof e?e.options:e;if(t&&(d.render=t,d.staticRenderFns=n,d._compiled=!0),r&&(d.functional=!0),o&&(d._scopeId="data-v-"+o),a?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),i&&i.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},d._ssrRegister=c):i&&(c=s?function(){i.call(this,this.$root.$options.shadowRoot)}:i),c)if(d.functional){d._injectStyles=c;var l=d.render;d.render=function(e,t){return c.call(t),l(e,t)}}else{var u=d.beforeCreate;d.beforeCreate=u?[].concat(u,c):[c]}return{exports:e,options:d}}(r,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"paging"},[n("ul",{staticClass:"mo-paging"},[n("li",{class:["paging-item","paging-item--prev","items-center",{"paging-item--disabled":1===e.index},"one"],on:{click:function(t){return t.stopPropagation(),e.prev(t)}}},[e._v("上一页")]),e._v(" "),n("li",{class:["paging-item","paging-item--first","items-center",{"paging-item--disabled":1===e.index},"two"],on:{click:function(t){return t.stopPropagation(),e.first(t)}}},[e._v("首页")]),e._v(" "),e.showPrevMore?n("li",{class:["paging-item","items-center","paging-item--more"]},[e._v("...")]):e._e(),e._v(" "),e._l(e.pagers,function(t){return n("li",{class:["paging-item","items-center",{"paging-item--current":e.index===t}],on:{click:function(n){return n.stopPropagation(),e.go(t)}}},[e._v(e._s(t))])}),e._v(" "),e.showNextMore?n("li",{class:["paging-item","items-center","paging-item--more"]},[e._v("...")]):e._e(),e._v(" "),n("li",{class:["paging-item","items-center","paging-item--last",{"paging-item--disabled":e.index===e.pages},"two"],on:{click:function(t){return t.stopPropagation(),e.last(t)}}},[e._v("尾页")]),e._v(" "),n("li",{class:["paging-item","items-center","paging-item--next",{"paging-item--disabled":e.index===e.pages},"one"],on:{click:function(t){return t.stopPropagation(),e.next(t)}}},[e._v("下一页")])],2)])},[],!1,null,"699dda6b",null).exports},c=function(e){for(var t=0,n=Object.entries(s);t<n.length;t++){var r=a(n[t],2),i=r[0],o=r[1];e.component(i,o)}};window&&window.Vue&&c(window.Vue);t.default=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(n,!0).forEach(function(t){o(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({install:c},s)}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,